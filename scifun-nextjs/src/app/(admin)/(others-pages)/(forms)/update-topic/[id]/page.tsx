"use client";

import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import PageBreadcrumb from "@/components/common/PageBreadCrumb";
import Input from "@/components/form/input/InputField";
import TextArea from "@/components/form/input/TextArea";
import { getTopicById, updateTopic, deleteTopic, addTopic } from "@/services/topicsService";
import { getSubjects } from "@/services/subjectService";
import { ToastContainer, toast } from "react-toastify";

export default function UpdateTopicPage() {
  const params = useParams();
  const id = params?.id as string | undefined; // ID t·ª´ URL, c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i (tr∆∞·ªùng h·ª£p t·∫°o m·ªõi)

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    subject: "",
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({
    name: "",
    description: "",
    subject: "",
  });

  const [subjects, setSubjects] = useState<{ id: string; name: string }[]>([]); // State for subjects

  // L·∫•y danh s√°ch c√°c m√¥n h·ªçc ƒë·ªÉ hi·ªÉn th·ªã trong dropdown
  useEffect(() => {
    const fetchSubjects = async () => {
      try {
        const response = await getSubjects(); // Fetch subjects
        const subjectOptions = response.subjects.map((subject: any) => ({
          id: subject.id,
          name: subject.name,
        }));
        setSubjects(subjectOptions);
      } catch (error) {
        console.error("Error fetching subjects:", error);
        toast.error("‚ùå L·ªói khi t·∫£i danh s√°ch m√¥n h·ªçc!");
      }
    };

    fetchSubjects();
  }, []);

  // N·∫øu c√≥ ID, l·∫•y d·ªØ li·ªáu ch·ªß ƒë·ªÅ ƒë·ªÉ ƒëi·ªÅn v√†o form
  useEffect(() => {
    if (!id) return;

    const fetchTopic = async () => {
      try {
        setLoading(true);
        const topic = await getTopicById(id);
        setFormData({ // S·ª≠ d·ª•ng nullish coalescing operator ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p gi√° tr·ªã l√† null/undefined
          name: topic.name ?? "",
          description: topic.description ?? "",
          subject: typeof topic.subject === 'object' && topic.subject !== null 
            ? (topic.subject as any).id || (topic.subject as any)._id // L·∫•y id t·ª´ object subject
            : typeof topic.subject === 'string' 
            ? topic.subject // N·∫øu ƒë√£ l√† string id
            : "", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        });
      } catch (error) {
        console.error("Error fetching topic:", error);
        toast.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ch·ªß ƒë·ªÅ.");
      } finally {
        setLoading(false);
      }
    };

    fetchTopic();
  }, [id]);

  const handleChange = (field: keyof typeof formData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (field in errors) setErrors((prev) => ({ ...prev, [field]: "" }));
  };
// ‚úÖ X·ª≠ l√Ω x√≥a ch·ªß ƒë·ªÅ
const handleDelete = async () => {
  if (!id) return; // N·∫øu kh√¥ng c√≥ ID (trang t·∫°o m·ªõi), th√¨ kh√¥ng x√≥a ƒë∆∞·ª£c

  const confirmDelete = window.confirm("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch·ªß ƒë·ªÅ n√†y kh√¥ng?");
  if (!confirmDelete) {
    return;
  }

  try {
    setLoading(true);
    const res = await deleteTopic(id);
    toast.success(`üóëÔ∏è ${res.message}`);
    
    // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng v·ªÅ danh s√°ch topic sau v√†i gi√¢y (n·∫øu mu·ªën)
    // V√≠ d·ª•: window.location.href = "/admin/topics";
  } catch (error: any) {
    console.error("[handleDelete] Error:", error);
    toast.error("‚ùå X√≥a ch·ªß ƒë·ªÅ th·∫•t b·∫°i!");
  } finally {
    setLoading(false);
  }
};

  // X·ª≠ l√Ω vi·ªác g·ª≠i form (t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
  const handleSubmit = async () => {
    const newErrors = {
      name: formData.name ? "" : "T√™n ch·ªß ƒë·ªÅ l√† b·∫Øt bu·ªôc.",
      description: formData.description ? "" : "M√¥ t·∫£ l√† b·∫Øt bu·ªôc.",
      subject: formData.subject ? "" : "M√£ m√¥n h·ªçc (subject ID) l√† b·∫Øt bu·ªôc.",
    };

    setErrors(newErrors);

    if (Object.values(newErrors).some((err) => err)) {
      toast.warn("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    try {
      setLoading(true);

      const payload = {
        name: formData.name,
        description: formData.description,
        subject: formData.subject,
      };

      if (id) {
        const updatedTopic = await updateTopic(id, payload);
        toast.success(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng ch·ªß ƒë·ªÅ: ${updatedTopic.name}`);
      } else {
        const created = await addTopic(payload);
        toast.success(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ch·ªß ƒë·ªÅ: ${created.name}`);
        setTimeout(() => {
          setFormData({ name: "", description: "", subject: "" }); // Reset form sau khi t·∫°o
        }, 500);
      }
    } catch (error: any) {
      console.error("[handleSubmit] Error:", error);
      toast.error("‚ùå Thao t√°c th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      {/* Toast container (g√≥c ph·∫£i) */}
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        style={{ zIndex: 999999 }}
      />
      <PageBreadcrumb pageTitle={id ? "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ" : "T·∫°o ch·ªß ƒë·ªÅ"} />
      <div className="max-w-3xl mx-auto mt-6 space-y-6">
        {/* Dropdown ch·ªçn Subject */}
        <div>
          <h3 className="text-lg font-semibold mb-2">
            Subject ID <span className="text-red-500">*</span>
          </h3>

          <div className="relative">
            <select
              value={formData.subject}
              onChange={(e) => handleChange("subject", e.target.value)}
              className="w-full appearance-none border rounded-lg px-3 py-2 bg-white dark:bg-dark-900"
            >
              <option value="">-- Ch·ªçn subject --</option>
              {subjects.map((subject) => (
                <option key={subject.id} value={subject.id}>
                  {subject.name}
                </option>
              ))}
            </select>

            <span className="absolute text-gray-500 -translate-y-1/2 pointer-events-none right-3 top-1/2 dark:text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clipRule="evenodd" />
              </svg>
            </span>
          </div>

          {errors.subject && <p className="text-sm text-red-600 mt-1">{errors.subject}</p>}
        </div>

        {/* T√™n ch·ªß ƒë·ªÅ */}
        <div>
          <h3 className="text-lg font-semibold mb-2">
            T√™n ch·ªß ƒë·ªÅ <span className="text-red-500">*</span>
          </h3>
          <Input
            type="text"
            value={formData.name}
            placeholder="Nh·∫≠p t√™n ch·ªß ƒë·ªÅ, v√≠ d·ª•: VƒÉn h·ªçc n∆∞·ªõc ngo√†i"
            maxLength={100}
            onChange={(e) => handleChange("name", e.target.value)}
            error={!!errors.name}
            hint={errors.name}
          />
        </div>

        {/* M√¥ t·∫£ */}
        <div>
          <h3 className="text-lg font-semibold mb-2">
            M√¥ t·∫£ <span className="text-red-500">*</span>
          </h3>
          <TextArea
            rows={6}
            placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ ch·ªß ƒë·ªÅ"
            value={formData.description}
            onChange={(value: string) => handleChange("description", value)}
            error={!!errors.description}
            hint={errors.description}
          />
        </div>

<div className="pt-4 flex justify-center gap-4">
  {/* N√∫t L∆∞u / C·∫≠p nh·∫≠t */}
  <button
    onClick={handleSubmit}
    disabled={loading}
    className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
  >
    {loading ? (id ? "ƒêang c·∫≠p nh·∫≠t..." : "ƒêang t·∫°o...") : id ? "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ" : "T·∫°o ch·ªß ƒë·ªÅ"}
  </button>

  {/* N√∫t X√≥a ch·ªâ hi·ªán n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t */}
  {id && (
    <button
      onClick={handleDelete}
      disabled={loading}
      className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition disabled:opacity-50"
    >
      {loading ? "ƒêang x√≥a..." : "X√≥a ch·ªß ƒë·ªÅ"}
    </button>
  )}
</div>

      </div>
    </div>
  );
}