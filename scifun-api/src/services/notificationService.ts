// src/services/notificationService.ts
import Notification from "../models/Notification";
import User from "../models/User";
import { emitRankChangeToUser } from "./socketService";
import { sendPlainEmail } from "../utils/emailService";

// Ch·ªâ 1 ch·ª©c nƒÉng: th√¥ng b√°o khi th·ª© h·∫°ng thay ƒë·ªïi
export const notifyRankChanged = async (params: {
  userId: string;
  subjectId: string;
  subjectName: string;
  period: "daily" | "weekly" | "monthly" | "alltime";
  oldRank: number;
  newRank: number;
  persist?: boolean;   // m·∫∑c ƒë·ªãnh true: l∆∞u DB
  email?: boolean;     // m·∫∑c ƒë·ªãnh true: g·ª≠i email text
}) => {
  const {
    userId,
    subjectId,
    subjectName,
    period,
    oldRank,
    newRank,
    persist = true,
    email = true,
  } = params;

  if (oldRank === newRank) return; // kh√¥ng ƒë·ªïi th√¨ th√¥i

  const change: "up" | "down" = newRank < oldRank ? "up" : "down";
  const diff = Math.abs(newRank - oldRank);

  // 1) Realtime qua WS
  emitRankChangeToUser(userId, {
    subjectId: subjectId.toString(),
    subjectName,
    period,
    oldRank,
    newRank,
    change,
  });

  // 2) L∆∞u DB (t·ªëi gi·∫£n)
  if (persist) {
    await Notification.create({
      userId,
      type: "RANK_CHANGED",
      title: "Thay ƒë·ªïi x·∫øp h·∫°ng",
      message:
        change === "up"
          ? `B·∫°n ƒë√£ tƒÉng ${diff} h·∫°ng (t·ª´ #${oldRank} ‚Üí #${newRank})`
          : `B·∫°n ƒë√£ gi·∫£m ${diff} h·∫°ng (t·ª´ #${oldRank} ‚Üí #${newRank})`,
      data: { subjectId, subjectName, period, oldRank, newRank, change },
      link: "/leaderboard",
    });
  }

  // 3) Email thu·∫ßn text
  if (email) {
    const user = await User.findById(userId);
    if (user?.email) {
      const subject = `[Quiz App] Th·ª© h·∫°ng c·ªßa b·∫°n ƒë√£ ${change === "up" ? "tƒÉng" : "gi·∫£m"}`;
      const textLines = [
        `Xin ch√†o ${user.email || "b·∫°n"},`,
        `Th·ª© h·∫°ng m√¥n ${subjectName} (${period}) c·ªßa b·∫°n ƒë√£ ${change === "up" ? "tƒÉng" : "gi·∫£m"} ${diff} b·∫≠c: #${oldRank} ‚Üí #${newRank}.`,
        `Xem b·∫£ng x·∫øp h·∫°ng: ${process.env.CLIENT_URL}/leaderboard`,
      ];
      await sendPlainEmail(user.email, subject, textLines.join("\n"));
    }
  }
};

// Th√¥ng b√°o khi c√≥ ng∆∞·ªùi ph·∫£n h·ªìi b√¨nh lu·∫≠n c·ªßa user
export const notifyCommentReply = async (params: {
  targetUserId: string; 
  fromUserName: string;  
  content: string;       
  commentId: string;     
  parentId: string;       
  persist?: boolean;      
  email?: boolean;        
}) => {
  const {
    targetUserId,
    fromUserName,
    content,
    commentId,
    parentId,
    persist = true,
    email = false,
  } = params;

  // L∆∞u DB (n·∫øu c·∫ßn)
  if (persist) {
    await Notification.create({
      userId: targetUserId,
      type: "COMMENT_REPLY",
      title: "C√≥ ph·∫£n h·ªìi m·ªõi üí¨",
      message: `${fromUserName} v·ª´a tr·∫£ l·ªùi b√¨nh lu·∫≠n c·ªßa b·∫°n: "${content}"`,
      data: { commentId, parentId },
      link: "/#comments",
    });
  }

  // 3Ô∏è‚É£ G·ª≠i email text (t√πy ch·ªçn)
  if (email) {
    const user = await User.findById(targetUserId);
    if (user?.email) {
      const subject = `[Quiz App] ${fromUserName} ƒë√£ ph·∫£n h·ªìi b√¨nh lu·∫≠n c·ªßa b·∫°n`;
      const text = [
        `Xin ch√†o ${user.fullname || "b·∫°n"},`,
        `${fromUserName} v·ª´a tr·∫£ l·ªùi b√¨nh lu·∫≠n c·ªßa b·∫°n:`,
        `"${content}"`,
        `Xem ph·∫£n h·ªìi t·∫°i: ${process.env.CLIENT_URL}/#comments`,
      ].join("\n");
      await sendPlainEmail(user.email, subject, text);
    }
  }
};  